/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
  extends: ['prettier'],
  root: true,
  env: {
    browser: true,
    es6: true,
    node: true,
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    sourceType: 'module',
  },
  plugins: [
    'prettier',
    'sonarjs',
    'eslint-plugin-unicorn',
    'eslint-plugin-jsdoc',
    'eslint-plugin-import',
    '@typescript-eslint',
    '@typescript-eslint/tslint',
  ],
  overrides: [
    {
      files: ['*.ts'],
      parserOptions: {
        project: ['./tsconfig.json'],
      },
    },
  ],
  rules: {
    // basic rules
    'array-bracket-spacing': ['error', 'never'],
    'arrow-body-style': 'error',
    'arrow-parens': ['error', 'always'],
    'block-spacing': ['error'],
    'comma-dangle': [
      'error',
      {
        arrays: 'always-multiline',
        objects: 'always-multiline',
        imports: 'always-multiline',
        exports: 'always-multiline',
      },
    ],
    'eol-last': ['error', 'always'],
    'id-blacklist': [
      'error',
      'any',
      'Number',
      'number',
      'String',
      'string',
      'Boolean',
      'boolean',
      'Undefined',
      'undefined',
    ],
    'id-match': 'error',
    'lines-between-class-members': [
      'error',
      'always',
      { exceptAfterSingleLine: true },
    ],
    'max-len': [
      'error',
      {
        ignorePattern:
          '(^import )|(new RegExp)|(^\\s*it\\()|( = \\/|https?:\\/\\/)|(^ \\* \\|)',
        code: 100,
      },
    ],
    'no-array-constructor': 'error',
    'no-caller': 'error',
    'no-cond-assign': 'error',
    'no-console': 'error',
    'no-duplicate-imports': 'error',
    'no-else-return': ['error'],
    'no-eval': 'error',
    'no-magic-numbers': [
      'error',
      {
        ignore: [0, -1, 1, 2, 1000],
      },
    ],
    'no-multiple-empty-lines': 'error',
    'no-new-wrappers': 'error',
    'no-param-reassign': 'error',
    'no-restricted-imports': ['error', 'assert', 'lodash'],
    'no-restricted-syntax': ['error', 'ForInStatement'],
    'no-template-curly-in-string': 'error',
    'no-trailing-spaces': 'error',
    'no-underscore-dangle': 'error',
    'no-unsafe-finally': 'error',
    'no-var': 'error',
    'object-curly-spacing': ['error', 'always'],
    'object-shorthand': 'error',
    'one-var': ['error', 'never'],
    'prefer-const': 'error',
    'prefer-object-spread': 'error',
    'quote-props': ['error', 'as-needed'],
    'space-before-function-paren': [
      'error',
      {
        anonymous: 'never',
        named: 'never',
        asyncArrow: 'always',
      },
    ],
    'space-in-parens': ['error', 'never'],
    'spaced-comment': [
      'off',
      'always',
      {
        markers: ['/'],
      },
    ],
    curly: ['error', 'multi-line'],
    eqeqeq: ['error', 'always'],
    quotes: [
      'error',
      'single',
      {
        avoidEscape: true,
        allowTemplateLiterals: true,
      },
    ],
    radix: 'error',
    semi: 'error',

    // typescript-eslint rules
    '@typescript-eslint/adjacent-overload-signatures': 'error',
    '@typescript-eslint/ban-types': [
      'error',
      {
        types: {
          Object: {
            message: 'Use {} instead.',
          },
          String: {
            message: "Use 'string' instead.",
          },
          Number: {
            message: "Use 'number' instead.",
          },
          Boolean: {
            message: "Use 'boolean' instead.",
          },
        },
      },
    ],
    '@typescript-eslint/explicit-member-accessibility': [
      'error',
      {
        accessibility: 'explicit',
        overrides: {
          constructors: 'no-public',
        },
      },
    ],
    // doesn't work with prettier in ternary
    // rely on prettier via pre-commit
    // '@typescript-eslint/indent': [
    //   'error',
    //   2,
    //   {
    //     ArrayExpression: 'first',
    //     ObjectExpression: 'first',
    //     FunctionDeclaration: {
    //       parameters: 'first',
    //     },
    //     FunctionExpression: {
    //       parameters: 'first',
    //     },
    //   },
    // ],
    '@typescript-eslint/member-delimiter-style': [
      'error',
      {
        multiline: {
          delimiter: 'semi',
          requireLast: true,
        },
        singleline: {
          delimiter: 'semi',
          requireLast: false,
        },
      },
    ],
    '@typescript-eslint/member-ordering': 'error',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'typeMethod',
        format: ['camelCase', 'UPPER_CASE'],
      },
    ],
    '@typescript-eslint/no-array-constructor': 'error',
    '@typescript-eslint/no-empty-interface': 'error',
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/no-extraneous-class': 'error',
    '@typescript-eslint/no-inferrable-types': [
      'error',
      {
        ignoreParameters: true,
        ignoreProperties: true,
      },
    ],
    '@typescript-eslint/no-namespace': 'error',
    '@typescript-eslint/no-this-alias': 'error',
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
    '@typescript-eslint/prefer-for-of': 'error',
    '@typescript-eslint/prefer-namespace-keyword': 'error',
    '@typescript-eslint/prefer-readonly': 'error',
    '@typescript-eslint/quotes': [
      'error',
      'single',
      {
        avoidEscape: true,
        allowTemplateLiterals: true,
      },
    ],
    '@typescript-eslint/semi': ['error', 'always'],
    '@typescript-eslint/triple-slash-reference': 'error',
    '@typescript-eslint/tslint/config': [
      'error',
      {
        rules: {
          ban: [
            true,
            {
              name: 'parseInt',
              message: 'tsstyle#type-coercion',
            },
            {
              name: 'parseFloat',
              message: 'tsstyle#type-coercion',
            },
            {
              name: 'Array',
              'message"': 'tsstyle#array-constructor',
            },
          ],
          'no-inferrable-types': true,
          whitespace: [
            true,
            'check-branch',
            'check-decl',
            'check-operator',
            'check-separator',
            'check-rest-spread',
            'check-type',
            'check-typecast',
            'check-type-operator',
          ],
        },
      },
    ],

    // unicorn rules
    'unicorn/filename-case': [
      'error',
      {
        cases: {
          kebabCase: true,
        },
      },
    ],
    'unicorn/prefer-ternary': 'error',

    // sonar rules
    'sonarjs/no-collapsible-if': 'error',

    // jsdoc rules
    'jsdoc/check-alignment': 'error',
    'jsdoc/check-indentation': 'error',
    'jsdoc/newline-after-description': 'error',
    'jsdoc/no-types': 'error',

    // import rules
    'import/no-extraneous-dependencies': [
      'error',
      {
        devDependencies: false,
      },
    ],
  },
};
